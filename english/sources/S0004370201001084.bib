@article{BONET20015,
title = {Planning as heuristic search},
journal = {Artificial Intelligence},
volume = {129},
number = {1},
pages = {5-33},
year = {2001},
issn = {0004-3702},
doi = {https://doi.org/10.1016/S0004-3702(01)00108-4},
url = {https://www.sciencedirect.com/science/article/pii/S0004370201001084},
author = {Blai Bonet and HÃ©ctor Geffner},
keywords = {Planning, Strips, Heuristic search, Domain-independent heuristics, Forward/backward search, Non-optimal planning, Graphplan},
abstract = {In the AIPS98 Planning Contest, the hsp planner showed that heuristic search planners can be competitive with state-of-the-art Graphplan and sat planners. Heuristic search planners like hsp transform planning problems into problems of heuristic search by automatically extracting heuristics from Strips encodings. They differ from specialized problem solvers such as those developed for the 24-Puzzle and Rubik's Cube in that they use a general declarative language for stating problems and a general mechanism for extracting heuristics from these representations. In this paper, we study a family of heuristic search planners that are based on a simple and general heuristic that assumes that action preconditions are independent. The heuristic is then used in the context of best-first and hill-climbing search algorithms, and is tested over a large collection of domains. We then consider variations and extensions such as reversing the direction of the search for speeding node evaluation, and extracting information about propositional invariants for avoiding dead-ends. We analyze the resulting planners, evaluate their performance, and explain when they do best. We also compare the performance of these planners with two state-of-the-art planners, and show that the simplest planner based on a pure best-first search yields the most solid performance over a large set of problems. We also discuss the strengths and limitations of this approach, establish a correspondence between heuristic search planning and Graphplan, and briefly survey recent ideas that can reduce the current gap in performance between general heuristic search planners and specialized solvers.}
}